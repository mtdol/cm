#lang racket
(require cm/core/parse-expr cm/core/interp cm/core/lex)

(module+ test
           (require rackunit))

(module+ test

(interp (parse-expr (tokenize-string "typedef St2 := int a, int b;")))
(interp (parse-expr (tokenize-string "typedef St1 := int a, (struct St2 st);")))

(check-equal? (interp (parse-expr (tokenize-string "string def struct St2 s2 := struct St2 (4,5;)")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "string s2")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "string def struct St2 s2, struct St2 s2_2 := struct St2 (4,5;)")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "string s2")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "string s2_2")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "string def struct St2 s2, s2_2 := struct St2 (4,5;)")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "string s2")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "string s2_2")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "string def s2, struct St2 s2_2 := struct St2 (4,5;)")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "string s2")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "string s2_2")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "string def s2, s2_2 := struct St2 (4,5;)")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "string s2")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "string s2_2")))
"(struct St2 (4, 5;))")

(check-equal? (interp (parse-expr (tokenize-string "let struct St2 s2 := struct St2 (4,5;) in string s2")))
"(struct St2 (4, 5;))")
(check-equal? (interp (parse-expr (tokenize-string "let struct St2 s2 := struct St2 (4,5;) in string struct? St2 s2")))
"true")
(check-equal? (interp (parse-expr (tokenize-string "let struct St2 s2 := struct St2 (4,5;) in string struct? St1 s2")))
"false")

(interp (parse-expr (tokenize-string "def sn := lam x := string x")))
(check-equal? (interp (parse-expr (tokenize-string "struct St2 (2,7;) : sn")))
"(struct St2 (2, 7;))")
(interp (parse-expr (tokenize-string "def sn := lam struct St2 x := string x")))
(check-equal? (interp (parse-expr (tokenize-string "struct St2 (2,7;) : sn")))
"(struct St2 (2, 7;))")
(interp (parse-expr (tokenize-string "def sn := lam struct St2 x, struct St2 y := string x $ \" \" $ string y")))
(check-equal? (interp (parse-expr (tokenize-string "(struct St2 (5,6;)) : (struct St2 (2,7;)) : sn")))
"(struct St2 (2, 7;)) (struct St2 (5, 6;))")
(interp (parse-expr (tokenize-string "def sn := lam x, struct St2 y := string x $ \" \" $ string y")))
(check-equal? (interp (parse-expr (tokenize-string "(struct St2 (5,6;)) : (struct St2 (2,7;)) : sn")))
"(struct St2 (2, 7;)) (struct St2 (5, 6;))")
(interp (parse-expr (tokenize-string "def sn := lam struct St2 x, y := string x $ \" \" $ string y")))
(check-equal? (interp (parse-expr (tokenize-string "(struct St2 (5,6;)) : (struct St2 (2,7;)) : sn")))
"(struct St2 (2, 7;)) (struct St2 (5, 6;))")
(interp (parse-expr (tokenize-string "def sn := lam x, y := string x $ \" \" $ string y")))
(check-equal? (interp (parse-expr (tokenize-string "(struct St2 (5,6;)) : (struct St2 (2,7;)) : sn")))
"(struct St2 (2, 7;)) (struct St2 (5, 6;))")

(interp (parse-expr (tokenize-string "def sn := lam struct St2 x, struct St1 y := string x $ \" \" $ string y")))
(check-equal? (interp (parse-expr (tokenize-string "(struct St1 (5,(struct St2 (1,2;);))) : (struct St2 (2,7;)) : sn")))
"(struct St2 (2, 7;)) (struct St1 (5, (struct St2 (1, 2;));))")
(interp (parse-expr (tokenize-string "def sn := lam x, struct St1 y := string x $ \" \" $ string y")))
(check-equal? (interp (parse-expr (tokenize-string "(struct St1 (5,(struct St2 (1,2;));)) : (struct St2 (2,7;)) : sn")))
"(struct St2 (2, 7;)) (struct St1 (5, (struct St2 (1, 2;));))")
(interp (parse-expr (tokenize-string "def sn := lam struct St2 x, y := string x $ \" \" $ string y")))
(check-equal? (interp (parse-expr (tokenize-string "(struct St1 (5,(struct St2 (1,2;));)) : (struct St2 (2,7;)) : sn")))
"(struct St2 (2, 7;)) (struct St1 (5, (struct St2 (1, 2;));))")
(interp (parse-expr (tokenize-string "def sn := lam x, y := string x $ \" \" $ string y")))
(check-equal? (interp (parse-expr (tokenize-string "(struct St1 (5,(struct St2 (1,2;));)) : (struct St2 (2,7;)) : sn")))
"(struct St2 (2, 7;)) (struct St1 (5, (struct St2 (1, 2;));))")


(interp (parse-expr (tokenize-string "typedef Stn := null")))

(interp (parse-expr (tokenize-string "def sn := lam struct Stn x, y := string x $ \" \" $ string y")))
(check-equal? (interp (parse-expr (tokenize-string "(struct St1 (5,(struct St2 (1,2;));)) : (struct Stn null) : sn")))
"(struct Stn ()) (struct St1 (5, (struct St2 (1, 2;));))")

(check-equal? (interp (parse-expr (tokenize-string "string struct? Stn (struct Stn null)")))
"true")
(check-equal? (interp (parse-expr (tokenize-string "string struct? St1 (struct Stn null)")))
"false")
(check-equal? (interp (parse-expr (tokenize-string "string struct? Stn (struct St2 (7,4;))")))
"false")

)
