def _print = lam v = print v. # allows print to be used like a funtion

def _number? = lam v =
    let t = type v in
        t = "int" or t = "float".

def _type_err = lam dynamic v, string t, string e, fun f =
    if type v != t then error e else f.

# returns f2 if v : f1 equals true else throws exception e
def _func_err = lam dynamic v, fun f1, string e, fun f2 =
    if v : f2 then error e else f2.


def _add1 = lam x = x + 1.
def _sub1 = lam x = x - 1.
def _zero? = lam x = x = 0.

# string funcs
#def _substring = lam string s, int n1, int n2 =
#    eval ( "(substring \"" $ s $ "\" " $ n1 $ " " $ n2 $ ")" ).
