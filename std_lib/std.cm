def print2 := lam v := print v. # allows print to be used like a function

def number? := lam v :=
    let t := type v in
        t = "int" or t = "float".

def add1 := lam int n := n + 1.
def add1f := lam float n := n + 1.0.
def sub1 := lam int n := n - 1.
def sub1f := lam float n := n - 1.0.
def zero? := lam int n := n = 0.
def zerof? := lam float n := n = 0.0.
def pos? := lam int n := n > 0.
def posf? := lam float n := n > 0.0.
def neg? := lam int n := n < 0.
def negf? := lam float n := n < 0.0.
def one? := lam int n := n = 1.
def onef? := lam float n := n = 1.0.
def even? := lam int n := n % 2 = 0.
def odd? := lam int n := n % 2 = 1.

def to_int := lam n := int n.
def to_float := lam n := float n.
def to_string := lam n := string n.
def to_bool := lam n := bool n.

# maps f onto all members of list lst
def map := lam fun f, list lst := 
    | null? lst -> null 
    else (`lst : f), (appl map f,~lst;).

# returns a list with only the elements that are true according to f
def filter := lam fun f, list lst := 
    | null? lst -> null 
    | `lst : f -> `lst, (appl filter f,~lst;)
    else appl filter f,~lst;.

# int | float -> int | float
def max := lam n1, n2 :=
    if n1 > n2 then n1 else n2.

# int | float -> int | float
def min := lam n1, n2 :=
    if n1 < n2 then n1 else n2.

# int, int, int -> int list
def range := lam int n1, int n2, int inc := 
    | inc = 0 -> error "invalid range"
    | inc > 0 and n1 > n2 -> error "invalid range"
    | inc < 0 and n1 < n2 ->  error "invalid range"
    else 
      | n1 >= n2 or n1 + inc > n2 -> n1; 
      else n1, (appl range (n1+inc, n2, inc;)).
