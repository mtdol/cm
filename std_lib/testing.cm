#:lang cm

-- macros for managing test results
#:def:log{} {% set _num_tests := _num_tests + 1} comma
#:def:pass{} {% set _num_successful_tests := _num_successful_tests + 1} comma
#:<def:fail{res|exp} 
  {% 
    set _num_failed_tests := _num_failed_tests + 1
  | {when print_failures? | @ "failure"}
  | {when print_failures? | @ ("expected:\n" $ exp)}
  | {when print_failures? | @ ("received:\n" $ res)}
  | {when print_failures? | @ ""}
  }
  comma
>:#

-- inputs and outputs will only be printed if this is `true`
static print_failures? := true//

-- the number of tests that we have run so far
static _num_tests := 0//
static _num_successful_tests := 0//
static _num_failed_tests := 0//

-- prints logging variables
defun _display_results () :=
  let str := 
    format
      : "test results:\n~2/~1\n"
      : {list _num_tests|_num_successful_tests}
  in
    write_string : str//

-- resets logging variables
defun _clear_results () :=
  {%
    set _num_tests := 0
  | set _num_successful_tests := 0
  | set _num_failed_tests := 0
  }//

defun main (list args) :=
  -- get all cm files from args
  let files := 
    {: filter | \elem -> file?:elem and (get_extension:elem = "cm") | 
      flatten : {: map 
        | \elem ->
          if directory?:elem then ls_rec:elem else elem
        | args}}
  in let files :=
    -- unique sort files
    remove_duplicates :
      {: map | expand_path | files}
  in
    if length files = 0 then
      @ "No files to test."
    else
      {% 
        {: map | _run_test_file | files}
      | @ ""
      | :>_display_results
      }//

defun _run_test_file (string file) :=
  {%
    @ format : "test: \"~1\"" : {list file}
  -- ensure that we are running the file in its habitat
  | cd : (get_path_to_file:file)
  | try 
      load "" file
    catch err with
      @ format
        : "Failure running file \"~1\"\n\nMessage:\n~2\n"
        : {list file|err::message}
  }//


-- `true` if `elem1` == `elem2` else `false` 
defun assert_equal (dynamic elem1, dynamic elem2) :=
  assert_equalf : (\x,y -> x == y) : elem1 : elem2//

-- `true` if `elem1` !== `elem2` else `false` 
defun assert_not_equal (dynamic elem1, dynamic elem2) :=
  assert_equalf : (\x,y -> x !== y) : elem1 : elem2//

-- if f : elem1 : elem2 -> true then true, else false
defun assert_equalf (fun f, dynamic elem1, dynamic elem2) :=
  {log} 
  | f:elem1:elem2 ->
    {pass}
    true
  else 
    {fail elem1 | elem2}
    false//

-- `true` if `appl f args` fails, else `false`
defun assert_failure (fun f, list args) :=
  {log}
  try 
    (appl f args) comma {fail args | "no exception raised"} false
  catch _ with 
    {pass} true//

-- `true` if `appl f args` fails with an error of the given `id`, else `false`
defun assert_failure_id (string id, fun f, list args) :=
  {log}
  try 
    (appl f args) comma {fail args | "no exception raised"} false
  catch e with 
    if e::id = id then 
      {pass} true 
    else
      {fail args | "no exception raised"} false//
