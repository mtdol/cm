- cm.rkt application includes racket stack trace, no es muy bien

- look over equality checking
    -- perhaps allow custom equality functions

- more general use macros?
    #:defop:{a}+={b} set a := a + b
    c += 2

-- `static` keyword
    -- like `def` except only defines a variable once
        --- equivalent to 
          `if not defined? {list "x"|{current_module}} then def x := val else void`
    -- static x := val
    -- defun will behave in a static manner
    -- perhaps make it so that each file that imports "a.cm" gets their
        own bindings; a `def x := 5` in "a.cm" will have a different reference for
        each file that imports it.

    -- perhaps make the static behavior the default and create a `redef`
      operator if the user wants to redefine.  

- figure out how to turn operators neatly into functions

- flesh out `defined?` a bit
    -- add ability to ask `local`, `param`, and `global`

- std.cm
    -- append_map
    -- filter_map
    -- partition
    -- shuffle
    -- sort

- function composition
    -- {: filter | compose not f | vs}

- testing utility
    -- work in progress
