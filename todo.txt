. figure out how to get lex to accept strings with \" in them

. printf (print + format)
. implement: format, slice, length
. implement let values
. defun keyword as shorthand for def and lambda

typecheck keyword:
    - def f = lam n1, n2 =
        typecheck n1 with ("int", "float";) in
            typecheck n2 with ("struct S", "struct Leaf";) in ...
    - throws exception when types don't match

# x doesn't know that it is called x
let x = lam z = match z | ( -> ( | z1, zs -> z1 + 1, (zs : x) end in (4,6,8;) : x.))

. load
    - loads both racket modules and cm ones
    - allow * wildcard
    - private (not shared) variables starting in _ (ie _f, private var f)

. evalp
    - evaluates racket procedures
    - takes a proc name (string) and returns the results of the call as a string
    - prefix racket var names with 'v:'


# null argument lambda
def oneplustwo = lam null = 1 + 2
